"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BggResponseParser = void 0;
const fast_xml_parser_1 = require("fast-xml-parser");
class BggResponseParser {
    constructor() {
        this.options = {
            attributeNamePrefix: "@_",
            // attrNodeName: "attr",
            textNodeName: "#text",
            ignoreAttributes: false,
            ignoreNameSpace: true,
            allowBooleanAttributes: true,
            parseNodeValue: true,
            parseAttributeValue: true,
            trimValues: true,
            cdataTagName: "__cdata",
            cdataPositionChar: "\\c",
            parseTrueNumberOnly: false,
            arrayMode: true,
            stopNodes: ["parse-me-as-string"]
        };
    }
    parseXmlToJs(xmlResponse) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => {
                resolve(fast_xml_parser_1.parse(xmlResponse, this.options));
            });
        });
    }
}
exports.BggResponseParser = BggResponseParser;
//# sourceMappingURL=BggResponseParser.js.map