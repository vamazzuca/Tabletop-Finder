"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextFetcher = void 0;
const isomorphic_unfetch_1 = __importDefault(require("isomorphic-unfetch"));
class TextFetcher {
    doFetch(query) {
        return __awaiter(this, void 0, void 0, function* () {
            let response = yield this.internalFetch(query);
            while (response.status === 202) {
                yield this.delay(6000);
                response = yield this.internalFetch(query);
            }
            return response.text();
        });
    }
    internalFetch(query) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield isomorphic_unfetch_1.default(query);
            return response;
        });
    }
    delay(waitFor) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => {
                setTimeout(resolve, waitFor);
            });
        });
    }
}
exports.TextFetcher = TextFetcher;
//# sourceMappingURL=TextFetcher.js.map