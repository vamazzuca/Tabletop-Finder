"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BggGuildClient = void 0;
class BggGuildClient {
    constructor(builder, fetcher, responseParser, dtoParser) {
        this.resource = "https://www.boardgamegeek.com/xmlapi2/guild";
        this.builder = builder;
        this.fetcher = fetcher;
        this.responseParser = responseParser;
        this.dtoParser = dtoParser;
    }
    query(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const querystring = this.builder.build(request);
            const xml = yield this.fetcher.doFetch(`${this.resource}?${querystring}`);
            const jsonData = yield this.responseParser.parseResponse(xml);
            return yield this.dtoParser.jsonToDto(jsonData);
        });
    }
}
exports.BggGuildClient = BggGuildClient;
//# sourceMappingURL=BggGuildClient.js.map